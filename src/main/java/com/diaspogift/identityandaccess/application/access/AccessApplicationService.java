package com.diaspogift.identityandaccess.application.access;import com.diaspogift.identityandaccess.application.command.AssignGroupToRoleCommand;import com.diaspogift.identityandaccess.application.command.AssignUserToRoleCommand;import com.diaspogift.identityandaccess.application.command.ProvisionRoleCommand;import com.diaspogift.identityandaccess.domain.model.DomainRegistry;import com.diaspogift.identityandaccess.domain.model.access.Role;import com.diaspogift.identityandaccess.domain.model.access.RoleRepository;import com.diaspogift.identityandaccess.domain.model.identity.*;import com.diaspogift.identityandaccess.port.adapter.persistence.exception.DiaspoGiftRepositoryException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.dao.IncorrectResultSizeDataAccessException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Collection;@Servicepublic class AccessApplicationService {    @Autowired    private GroupRepository groupRepository;    @Autowired    private RoleRepository roleRepository;    @Autowired    private TenantRepository tenantRepository;    @Autowired    private UserRepository userRepository;    @Transactional    public void assignUserToRole(AssignUserToRoleCommand aCommand) throws DiaspoGiftRepositoryException {        try {            TenantId tenantId = new TenantId(aCommand.getTenantId());            User user =                    this.userRepository()                            .userWithUsername(                                    tenantId,                                    aCommand.getUsername());            if (user != null) {                Role role =                        this.roleRepository()                                .roleNamed(                                        tenantId,                                        aCommand.getRoleName());                if (role != null) {                    role.assignUser(user);                }            }        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    //TO TEST    @Transactional    public void assignGroupToRole(AssignGroupToRoleCommand aCommand) throws DiaspoGiftRepositoryException {        try {            TenantId tenantId = new TenantId(aCommand.getTenantId());            System.out.println("\n\n TENANTID ============= " + tenantId);            System.out.println("\n\n TENANTID ============= " + tenantId);            System.out.println("\n\n TENANTID ============= " + tenantId);            Group group =                    this.groupRepository()                            .groupNamed(                                    tenantId,                                    aCommand.getGroupName());            System.out.println("\n\n group ============= " + group);            if (group != null) {                Role role =                        this.roleRepository()                                .roleNamed(                                        tenantId,                                        aCommand.getRoleName());                if (role != null) {                    role.assignGroup(group, DomainRegistry.groupMemberService());                }            }        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    @Transactional(readOnly = true)    public boolean isUserInRole(String aTenantId, String aUsername, String aRoleName) throws DiaspoGiftRepositoryException {        try {            User user = this.userInRole(aTenantId, aUsername, aRoleName);            return user != null;        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    @Transactional    public void provisionRole(ProvisionRoleCommand aCommand) throws DiaspoGiftRepositoryException {        try {            TenantId tenantId = new TenantId(aCommand.getTenantId());            Tenant tenant = this.tenantRepository().tenantOfId(tenantId);            Role role =                    tenant.provisionRole(                            aCommand.getRoleName(),                            aCommand.getDescription(),                            aCommand.isSupportsNesting());            this.roleRepository().add(role);        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    @Transactional(readOnly = true)    public User userInRole(String aTenantId, String aUsername, String aRoleName) throws DiaspoGiftRepositoryException {        try {            User userInRole = null;            TenantId tenantId = new TenantId(aTenantId);            User user =                    this.userRepository()                            .userWithUsername(                                    tenantId,                                    aUsername);            System.out.println("\n\n User in  userInRole   =======  " + user);            if (user != null) {                Role role =                        this.roleRepository()                                .roleNamed(tenantId, aRoleName);                System.out.println("\n\n role in  userInRole   =======  " + role);                if (role != null) {                    System.out.println("\n\n in if role != null   =======  " + role);                    if (role.isInRole(user, DomainRegistry.groupMemberService())) {                        System.out.println("\n\n in if role.isInRole  =======  " + role);                        userInRole = user;                        System.out.println("\n\n userInRole in  userInRole   =======  " + userInRole);                    }                }            }            return userInRole;        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    //TO DO TEST    @Transactional    public Collection<Role> allRoles(String aTenantId) {        TenantId tenantId = new TenantId(aTenantId);        return this.roleRepository().allRoles(tenantId);    }    //TO DO TEST    @Transactional    public Role roleNamed(String aTenantId, String aName) {        TenantId tenantId = new TenantId(aTenantId);        return this.roleRepository().roleNamed(tenantId, aName);    }    //TO DO TEST    @Transactional    public void removeRoleNamed(String aTenantId, String aName) throws DiaspoGiftRepositoryException {        try {            TenantId tenantId = new TenantId(aTenantId);            Role roleToRemove = this.roleRepository().roleNamed(tenantId, aName);            this.roleRepository().remove(roleToRemove);        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    private GroupRepository groupRepository() {        return this.groupRepository;    }    private RoleRepository roleRepository() {        return this.roleRepository;    }    private TenantRepository tenantRepository() {        return this.tenantRepository;    }    private UserRepository userRepository() {        return this.userRepository;    }}