package com.diaspogift.identityandaccess.application.access;import com.diaspogift.identityandaccess.application.command.AssignUserToRoleCommand;import com.diaspogift.identityandaccess.application.command.ProvisionRoleCommand;import com.diaspogift.identityandaccess.domain.model.DomainRegistry;import com.diaspogift.identityandaccess.domain.model.access.Role;import com.diaspogift.identityandaccess.domain.model.access.RoleRepository;import com.diaspogift.identityandaccess.domain.model.identity.*;import com.diaspogift.identityandaccess.infrastructure.persistence.exception.DiaspoGiftRepositoryException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.dao.IncorrectResultSizeDataAccessException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Servicepublic class AccessApplicationService {    @Autowired    private GroupRepository groupRepository;    @Autowired    private RoleRepository roleRepository;    @Autowired    private TenantRepository tenantRepository;    @Autowired    private UserRepository userRepository;    @Transactional    public void assignUserToRole(AssignUserToRoleCommand aCommand) throws DiaspoGiftRepositoryException {        try {            TenantId tenantId = new TenantId(aCommand.getTenantId());            User user =                    this.userRepository()                            .userWithUsername(                                    tenantId,                                    aCommand.getUsername());            if (user != null) {                Role role =                        this.roleRepository()                                .roleNamed(                                        tenantId,                                        aCommand.getRoleName());                if (role != null) {                    role.assignUser(user);                }            }        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    @Transactional(readOnly = true)    public boolean isUserInRole(String aTenantId, String aUsername, String aRoleName) throws DiaspoGiftRepositoryException {        try {            User user = this.userInRole(aTenantId, aUsername, aRoleName);            return user != null;        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    @Transactional    public void provisionRole(ProvisionRoleCommand aCommand) throws DiaspoGiftRepositoryException {        try {            TenantId tenantId = new TenantId(aCommand.getTenantId());            Tenant tenant = this.tenantRepository().tenantOfId(tenantId);            Role role =                    tenant.provisionRole(                            aCommand.getRoleName(),                            aCommand.getDescription(),                            aCommand.isSupportsNesting());            this.roleRepository().add(role);        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    @Transactional(readOnly = true)    public User userInRole(String aTenantId, String aUsername, String aRoleName) throws DiaspoGiftRepositoryException {        try {            User userInRole = null;            TenantId tenantId = new TenantId(aTenantId);            User user =                    this.userRepository()                            .userWithUsername(                                    tenantId,                                    aUsername);            if (user != null) {                Role role =                        this.roleRepository()                                .roleNamed(tenantId, aRoleName);                if (role != null) {                    if (role.isInRole(user, DomainRegistry.groupMemberService())) {                        userInRole = user;                    }                }            }            return userInRole;        } catch (EmptyResultDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        } catch (IncorrectResultSizeDataAccessException e) {            throw new DiaspoGiftRepositoryException(e.getMessage(), e, e.getClass().getSimpleName());        }    }    private GroupRepository groupRepository() {        return this.groupRepository;    }    private RoleRepository roleRepository() {        return this.roleRepository;    }    private TenantRepository tenantRepository() {        return this.tenantRepository;    }    private UserRepository userRepository() {        return this.userRepository;    }}