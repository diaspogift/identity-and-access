//   Copyright 2012,2013 Vaughn Vernon////   Licensed under the Apache License, Version 2.0 (the "License");//   you may not use this file except in compliance with the License.//   You may obtain a copy of the License at////       http://www.apache.org/licenses/LICENSE-2.0////   Unless required by applicable law or agreed to in writing, software//   distributed under the License is distributed on an "AS IS" BASIS,//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.//   See the License for the specific language governing permissions and//   limitations under the License.package com.diaspogift.identityandaccess.application.identity;import com.diaspogift.identityandaccess.application.command.*;import com.diaspogift.identityandaccess.domain.model.identity.*;import com.diaspogift.identityandaccess.infrastructure.exception.DiaspogiftRipositoryException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Servicepublic class IdentityApplicationService {    @Autowired    private AuthenticationService authenticationService;    @Autowired    private GroupMemberService groupMemberService;    @Autowired    private GroupRepository groupRepository;    @Autowired    private TenantProvisioningService tenantProvisioningService;    @Autowired    private TenantRepository tenantRepository;    @Autowired    private UserRepository userRepository;    public IdentityApplicationService() {        super();        // IdentityAccessEventProcessor.register();    }    @Transactional    public void activateTenant(ActivateTenantCommand aCommand) {        Tenant tenant = null;        try {            tenant = this.existingTenant(aCommand.getTenantId());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        tenant.activate();    }    @Transactional    public void addGroupToGroup(AddGroupToGroupCommand aCommand){        Group parentGroup = null;        Group childGroup = null;        try {            parentGroup = this.existingGroup(                    aCommand.getTenantId(),                    aCommand.getParentGroupName());            childGroup = this.existingGroup(                    aCommand.getTenantId(),                    aCommand.getChildGroupName());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        parentGroup.addGroup(childGroup, this.groupMemberService());    }    @Transactional    public void addUserToGroup(AddUserToGroupCommand aCommand) {        Group group = null;        User user = null;        try {            group = this.existingGroup(                    aCommand.getTenantId(),                    aCommand.getGroupName());            user = this.existingUser(                    aCommand.getTenantId(),                    aCommand.getUsername());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        group.addUser(user);    }    @Transactional(readOnly = true)    public UserDescriptor authenticateUser(AuthenticateUserCommand aCommand) {        UserDescriptor userDescriptor =                null;        try {            userDescriptor = this.authenticationService()                    .authenticate(                            new TenantId(aCommand.getTenantId()),                            aCommand.getUsername(),                            aCommand.getPassword());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        return userDescriptor;    }    @Transactional    public void deactivateTenant(DeactivateTenantCommand aCommand) {        Tenant tenant = null;        try {            tenant = this.existingTenant(aCommand.getTenantId());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        tenant.deactivate();    }    @Transactional    public void changeUserContactInformation(ChangeContactInfoCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        try {            this.internalChangeUserContactInformation(                    user,                    new ContactInformation(                            new EmailAddress(aCommand.getEmailAddress()),                            new PostalAddress(                                    aCommand.getAddressStreetAddress(),                                    aCommand.getAddressCity(),                                    aCommand.getAddressStateProvince(),                                    aCommand.getAddressPostalCode(),                                    aCommand.getAddressCountryCode()),                            new Telephone(aCommand.getPrimaryCountryCode(), aCommand.getPrimaryDialingCountryCode(), aCommand.getPrimaryTelephone()),                            new Telephone(aCommand.getSecondaryCountryCode(), aCommand.getSecondaryDialingCountryCode(), aCommand.getSecondaryTelephone())));        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }    }    @Transactional    public void changeUserEmailAddress(ChangeEmailAddressCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());            this.internalChangeUserContactInformation(                    user,                    user.person()                            .contactInformation()                            .changeEmailAddress(new EmailAddress(aCommand.getEmailAddress())));        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }    }    @Transactional    public void changeUserPostalAddress(ChangePostalAddressCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());            this.internalChangeUserContactInformation(                    user,                    user.person()                            .contactInformation()                            .changePostalAddress(                                    new PostalAddress(                                            aCommand.getAddressStreetAddress(),                                            aCommand.getAddressCity(),                                            aCommand.getAddressStateProvince(),                                            aCommand.getAddressPostalCode(),                                            aCommand.getAddressCountryCode())));        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }    }    @Transactional    public void changeUserPrimaryTelephone(ChangePrimaryTelephoneCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());            this.internalChangeUserContactInformation(                    user,                    user.person()                            .contactInformation()                            .changePrimaryTelephone(                                    new Telephone(aCommand.getCountryCode(), aCommand.getDialingCountryCode(),                                            aCommand.getTelephone())));        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }    }    @Transactional    public void changeUserSecondaryTelephone(ChangeSecondaryTelephoneCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());            this.internalChangeUserContactInformation(                    user,                    user.person()                            .contactInformation()                            .changeSecondaryTelephone(new Telephone(aCommand.getCountryCode(), aCommand.getDialingCountryCode(), aCommand.getTelephone())));        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }    }    @Transactional    public void changeUserPassword(ChangeUserPasswordCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        user.changePassword(aCommand.getCurrentPassword(), aCommand.getChangedPassword());    }    @Transactional    public void changeUserPersonalName(ChangeUserPersonalNameCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        user.person().changeName(new FullName(aCommand.getFirstName(), aCommand.getLastName()));    }    @Transactional    public void defineUserEnablement(DefineUserEnablementCommand aCommand) {        User user = null;        try {            user = this.existingUser(aCommand.getTenantId(), aCommand.getUsername());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        user.defineEnablement(                new Enablement(                        aCommand.isEnabled(),                        aCommand.getStartDate(),                        aCommand.getEndDate()));    }    @Transactional(readOnly = true)    public Group group(String aTenantId, String aGroupName) throws DiaspogiftRipositoryException {        Group group = null;        try {           group =                   this.groupRepository()                           .groupNamed(new TenantId(aTenantId), aGroupName);       }catch (EmptyResultDataAccessException e){           throw new DiaspogiftRipositoryException("Auccun groupe trouve avec le nom " + aGroupName +                   " et appartenant au Partenaire " + aTenantId, e,                   EmptyResultDataAccessException.class.getSimpleName());       }        return group;    }    @Transactional(readOnly = true)    public boolean isGroupMember(String aTenantId, String aGroupName, String aUsername) {        Group group = null;        User user = null;        try {            group = this.existingGroup(                    aTenantId,                    aGroupName);            user = this.existingUser(                    aTenantId,                    aUsername);        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        return group.isMember(user, this.groupMemberService());    }    @Transactional    public Group provisionGroup(ProvisionGroupCommand aCommand) throws DiaspogiftRipositoryException {        Tenant tenant = null;        Group group = null;        try {            tenant = this.existingTenant(aCommand.getTenantId());         group =                tenant.provisionGroup(                        aCommand.getGroupName(),                        aCommand.getDescription());            this.groupRepository().add(group);        }catch (DataIntegrityViolationException e){            throw new DiaspogiftRipositoryException("Duplication de la cle (" + group.tenantId().id() +                    ", " + group.name() + ")", e, DataIntegrityViolationException.class.getSimpleName());        }        return group;    }    @Transactional    public Tenant provisionTenant(ProvisionTenantCommand aCommand) {        Tenant tenant = null;        try {            this.tenantProvisioningService().provisionTenant(                    aCommand.getTenantName(),                    aCommand.getTenantDescription(),                    new FullName(                            aCommand.getAdministorFirstName(),                            aCommand.getAdministorLastName()),                    new EmailAddress(aCommand.getEmailAddress()),                    new PostalAddress(                            aCommand.getAddressStateProvince(),                            aCommand.getAddressCity(),                            aCommand.getAddressStateProvince(),                            aCommand.getAddressPostalCode(),                            aCommand.getAddressCountryCode()),                    new Telephone(aCommand.getPrimaryCountryCode(), aCommand.getPrimaryDialingCountryCode(), aCommand.getPrimaryTelephone()),                    new Telephone(aCommand.getSecondaryCountryCode(), aCommand.getSecondaryDialingCountryCode(), aCommand.getSecondaryTelephone()));        }catch (DiaspogiftRipositoryException e){            e.printStackTrace();        }        return tenant;    }    @Transactional    public User registerUser(RegisterUserCommand aCommand) throws DiaspogiftRipositoryException {        Tenant tenant = null;        User user = null;        try {            tenant = this.existingTenant(aCommand.getTenantId());            user =                    tenant.registerUser(                            aCommand.getInvitationIdentifier(),                            aCommand.getUsername(),                            aCommand.getPassword(),                            new Enablement(                                    aCommand.isEnabled(),                                    aCommand.getStartDate(),                                    aCommand.getEndDate()),                            new Person(                                    new TenantId(aCommand.getTenantId()),                                    new FullName(aCommand.getFirstName(), aCommand.getLastName()),                                    new ContactInformation(                                            new EmailAddress(aCommand.getEmailAddress()),                                            new PostalAddress(                                                    aCommand.getAddressStateProvince(),                                                    aCommand.getAddressCity(),                                                    aCommand.getAddressStateProvince(),                                                    aCommand.getAddressPostalCode(),                                                    aCommand.getAddressCountryCode()),                                            new Telephone(aCommand.getPrimaryCountryCode(), aCommand.getPrimaryDialingCountryCode(), aCommand.getPrimaryTelephone()),                                            new Telephone(aCommand.getSecondaryCountryCode(), aCommand.getSecondaryDialingCountryCode(), aCommand.getSecondaryTelephone()))));        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        this.userRepository().add(user);        return user;    }    @Transactional    public void removeGroupFromGroup(RemoveGroupFromGroupCommand aCommand) {        Group parentGroup = null;        Group childGroup = null;        try {            parentGroup = this.existingGroup(                    aCommand.getTenantId(),                    aCommand.getParentGroupName());            childGroup = this.existingGroup(                    aCommand.getTenantId(),                    aCommand.getChildGroupName());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        parentGroup.removeGroup(childGroup);    }    @Transactional    public void removeUserFromGroup(RemoveUserFromGroupCommand aCommand) {        Group group = null;        User user = null;        try {            group = this.existingGroup(                    aCommand.getTenantId(),                    aCommand.getGroupName());            user = this.existingUser(                    aCommand.getTenantId(),                    aCommand.getUsername());        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        group.removeUser(user);    }    @Transactional(readOnly = true)    public Tenant tenant(String aTenantId) throws DiaspogiftRipositoryException{        Tenant tenant = null;        try {             tenant =                    this.tenantRepository()                            .tenantOfId(new TenantId(aTenantId));        }catch (EmptyResultDataAccessException e){            throw new DiaspogiftRipositoryException(                    "Auccun partenaire trouve avec l'identifiant " + aTenantId, e,                    EmptyResultDataAccessException.class.getSimpleName());        }        return tenant;    }    @Transactional(readOnly = true)    public User user(String aTenantId, String aUsername) throws DiaspogiftRipositoryException {        User user = null;        try {            user = this.userRepository()                    .userWithUsername(                            new TenantId(aTenantId),                            aUsername);        }catch (EmptyResultDataAccessException e){            throw new DiaspogiftRipositoryException("Acun utilisateur trouve avec le nom d'utilisateur "+                    aUsername + " appartenant au partenaire " + aTenantId + e.getMessage(), e,                    EmptyResultDataAccessException.class.getSimpleName());        }        return user;    }    @Transactional(readOnly = true)    public UserDescriptor userDescriptor(            String aTenantId,            String aUsername) {        UserDescriptor userDescriptor = null;        User user = null;        try {            user = this.user(aTenantId, aUsername);        } catch (DiaspogiftRipositoryException e) {            e.printStackTrace();        }        if (user != null) {            userDescriptor = user.userDescriptor();        }        return userDescriptor;    }    private AuthenticationService authenticationService() {        return this.authenticationService;    }    private Group existingGroup(String aTenantId, String aGroupName) throws DiaspogiftRipositoryException {        Group group = null;        try{            group = this.group(aTenantId, aGroupName);        }catch (DiaspogiftRipositoryException e){            throw new DiaspogiftRipositoryException(                    "Le Groupe n'existe pas pour : "                            + aTenantId + " et: " + aGroupName, e, e.getMessageKey());        }        return group;    }    private Tenant existingTenant(String aTenantId) throws DiaspogiftRipositoryException {        Tenant tenant = null;        try{            tenant = this.tenant(aTenantId);        }catch (DiaspogiftRipositoryException e){            throw new DiaspogiftRipositoryException(                    "Aucun Partenaire trouve avec l'identifiant " + aTenantId, e, e.getMessageKey());        }        return tenant;    }    private User existingUser(String aTenantId, String aUsername) throws DiaspogiftRipositoryException {        User user = null;        try{            user = this.user(aTenantId, aUsername);        }catch (DiaspogiftRipositoryException e){            throw new DiaspogiftRipositoryException(                    "L'utilisateur n'existe pas pour le partenaire: "                            + aTenantId + " et ayant pour nom d'utilisateur " + aUsername, e, e.getMessageKey());        }        return user;    }    private void internalChangeUserContactInformation(            User aUser,            ContactInformation aContactInformation) throws DiaspogiftRipositoryException {        if (aUser == null) {            throw new DiaspogiftRipositoryException("L'utilisateur doit exister au prealable.", new Exception(),"USER_MUST_EXISTS");        }        aUser.person().changeContactInformation(aContactInformation);    }    private TenantProvisioningService tenantProvisioningService() {        return this.tenantProvisioningService;    }    private TenantRepository tenantRepository() {        return this.tenantRepository;    }    private UserRepository userRepository() {        return this.userRepository;    }    private GroupMemberService groupMemberService() {        return this.groupMemberService;    }    private GroupRepository groupRepository() {        return this.groupRepository;    }}