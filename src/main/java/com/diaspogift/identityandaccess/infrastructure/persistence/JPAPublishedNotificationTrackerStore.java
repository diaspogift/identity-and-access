//   Copyright 2012,2013 Vaughn Vernon////   Licensed under the Apache License, Version 2.0 (the "License");//   you may not use this file except in compliance with the License.//   You may obtain a copy of the License at////       http://www.apache.org/licenses/LICENSE-2.0////   Unless required by applicable law or agreed to in writing, software//   distributed under the License is distributed on an "AS IS" BASIS,//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.//   See the License for the specific language governing permissions and//   limitations under the License.package com.diaspogift.identityandaccess.infrastructure.persistence;import com.diaspogift.identityandaccess.domain.model.common.notification.Notification;import com.diaspogift.identityandaccess.domain.model.common.notification.PublishedNotificationTracker;import com.diaspogift.identityandaccess.domain.model.common.notification.PublishedNotificationTrackerStore;import org.springframework.stereotype.Repository;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import java.util.List;@Repositorypublic class JPAPublishedNotificationTrackerStore implements PublishedNotificationTrackerStore {    private String typeName;    @PersistenceContext    private EntityManager entityManager;    @Override    public PublishedNotificationTracker publishedNotificationTracker() {        return this.publishedNotificationTracker(this.typeName());    }    @Override    public PublishedNotificationTracker publishedNotificationTracker(String aTypeName) {        PublishedNotificationTracker publishedNotificationTracker = null;        try {            publishedNotificationTracker =                    this.entityManager()                            .createQuery(                                    "select publishedNotificationTracker from PublishedNotificationTracker as publishedNotificationTracker "                                            + " where publishedNotificationTracker.typeName =:typeName", PublishedNotificationTracker.class)                            .setParameter("typeName", aTypeName)                            .getSingleResult();        } catch (Exception e) {            // fall through        }        if (publishedNotificationTracker == null) {            publishedNotificationTracker =                    new PublishedNotificationTracker(this.typeName());        }        return publishedNotificationTracker;    }    @Override    public void trackMostRecentPublishedNotification(            PublishedNotificationTracker aPublishedNotificationTracker,            List<Notification> aNotifications) {        int lastIndex = aNotifications.size() - 1;        if (lastIndex >= 0) {            long mostRecentId = aNotifications.get(lastIndex).notificationId();            aPublishedNotificationTracker.setMostRecentPublishedNotificationId(mostRecentId);            this.entityManager().persist(aPublishedNotificationTracker);        }    }    @Override    public String typeName() {        return typeName;    }    private void setTypeName(String aTypeName) {        this.typeName = aTypeName;    }    public EntityManager entityManager() {        return this.entityManager;    }}