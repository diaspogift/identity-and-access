//   Copyright 2012,2013 Vaughn Vernon////   Licensed under the Apache License, Version 2.0 (the "License");//   you may not use this file except in compliance with the License.//   You may obtain a copy of the License at////       http://www.apache.org/licenses/LICENSE-2.0////   Unless required by applicable law or agreed to in writing, software//   distributed under the License is distributed on an "AS IS" BASIS,//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.//   See the License for the specific language governing permissions and//   limitations under the License.package com.diaspogift.identityandaccess.infrastructure.messaging;import com.diaspogift.identityandaccess.domain.model.common.DomainEvent;import com.diaspogift.identityandaccess.domain.model.common.event.EventStore;import com.diaspogift.identityandaccess.domain.model.common.event.StoredEvent;import com.diaspogift.identityandaccess.domain.model.common.notification.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jms.core.JmsTemplate;import org.springframework.stereotype.Component;import javax.jms.MessageProducer;import java.util.ArrayList;import java.util.List;@Componentpublic class AMQNotificationPublisher implements NotificationPublisher {    @Autowired    private EventStore eventStore;    @Autowired    private PublishedNotificationTrackerStore publishedNotificationTrackerStore;    @Autowired    private JmsTemplate jmsTemplate;    @Override    public void publishNotifications() {        PublishedNotificationTracker publishedNotificationTracker =                this.publishedNotificationTrackerStore().publishedNotificationTracker();        List<Notification> notifications =                this.listUnpublishedNotifications(                        publishedNotificationTracker.mostRecentPublishedNotificationId());        try {            for (Notification notification : notifications) {                this.publish(notification, null);            }            this.publishedNotificationTrackerStore()                    .trackMostRecentPublishedNotification(                            publishedNotificationTracker,                            notifications);        } finally {            //        }    }    @Override    public boolean internalOnlyTestConfirmation() {        throw new UnsupportedOperationException("Not supported by production implementation.");    }    private EventStore eventStore() {        return this.eventStore;    }    private void setEventStore(EventStore anEventStore) {        this.eventStore = anEventStore;    }    private List<Notification> listUnpublishedNotifications(            long aMostRecentPublishedMessageId) {        List<StoredEvent> storedEvents =                this.eventStore().allStoredEventsSince(aMostRecentPublishedMessageId);        List<Notification> notifications =                this.notificationsFrom(storedEvents);        return notifications;    }    private List<Notification> notificationsFrom(List<StoredEvent> aStoredEvents) {        List<Notification> notifications =                new ArrayList<Notification>(aStoredEvents.size());        for (StoredEvent storedEvent : aStoredEvents) {            DomainEvent domainEvent = storedEvent.toDomainEvent();            Notification notification =                    new Notification(storedEvent.eventId(), domainEvent);            notifications.add(notification);        }        return notifications;    }    private void publish(Notification aNotification, MessageProducer aMessageProducer) {/*        MessageParameters messageParameters =            MessageParameters.durableTextParameters(                    aNotification.typeName(),                    Long.toString(aNotification.notificationId()),                    aNotification.occurredOn());*/        String notification =                NotificationSerializer                        .instance()                        .serialize(aNotification);        jmsTemplate.convertAndSend("NEW_QUEUE", notification);    }    private PublishedNotificationTrackerStore publishedNotificationTrackerStore() {        return publishedNotificationTrackerStore;    }    private void setPublishedNotificationTrackerStore(PublishedNotificationTrackerStore publishedNotificationTrackerStore) {        this.publishedNotificationTrackerStore = publishedNotificationTrackerStore;    }}