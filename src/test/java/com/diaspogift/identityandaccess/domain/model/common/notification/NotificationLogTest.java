//   Copyright 2012,2013 Vaughn Vernon////   Licensed under the Apache License, Version 2.0 (the "License");//   you may not use this file except in compliance with the License.//   You may obtain a copy of the License at////       http://www.apache.org/licenses/LICENSE-2.0////   Unless required by applicable law or agreed to in writing, software//   distributed under the License is distributed on an "AS IS" BASIS,//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.//   See the License for the specific language governing permissions and//   limitations under the License.package com.diaspogift.identityandaccess.domain.model.common.notification;import com.diaspogift.identityandaccess.domain.model.common.CommonTestCase;import com.diaspogift.identityandaccess.domain.model.common.event.EventStore;import com.diaspogift.identityandaccess.infrastructure.persistence.JPAEventStore;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.transaction.annotation.Transactional;import static junit.framework.TestCase.assertFalse;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;@RunWith(SpringRunner.class)@SpringBootTest@Transactionalpublic class NotificationLogTest extends CommonTestCase {    @Autowired    JPAEventStore jpaEventStore;    @Autowired    private EventStore eventStore;    public NotificationLogTest() {        super();    }    @Test    public void testCurrentNotificationLogFromFactory() throws Exception {        NotificationLogFactory factory = new NotificationLogFactory(eventStore);        NotificationLog log = factory.createCurrentNotificationLog();        assertTrue(NotificationLogFactory.notificationsPerLog() >= log.totalNotifications());        assertTrue(eventStore.countStoredEvents() >= log.totalNotifications());        assertFalse(log.hasNextNotificationLog());        assertTrue(log.hasPreviousNotificationLog());        assertFalse(log.isArchived());    }    @Test    public void testFirstNotificationLogFromFactory() throws Exception {        EventStore eventStore = this.eventStore();        NotificationLogId id = NotificationLogId.first(NotificationLogFactory.notificationsPerLog());        NotificationLogFactory factory = new NotificationLogFactory(eventStore);        NotificationLog log = factory.createNotificationLog(id);        assertEquals(NotificationLogFactory.notificationsPerLog(), log.totalNotifications());        assertTrue(eventStore.countStoredEvents() >= log.totalNotifications());        assertTrue(log.hasNextNotificationLog());        assertFalse(log.hasPreviousNotificationLog());        assertTrue(log.isArchived());    }    @Test    public void testPreviousOfCurrentNotificationLogFromFactory() throws Exception {        EventStore eventStore = this.eventStore();        long totalEvents = eventStore.countStoredEvents();        boolean shouldBePrevious = totalEvents > (NotificationLogFactory.notificationsPerLog() * 2);        NotificationLogFactory factory = new NotificationLogFactory(eventStore);        NotificationLog log = factory.createCurrentNotificationLog();        NotificationLogId previousId = log.decodedPreviousNotificationLogId();        log = factory.createNotificationLog(previousId);        assertEquals(NotificationLogFactory.notificationsPerLog(), log.totalNotifications());        assertTrue(totalEvents >= log.totalNotifications());        assertTrue(log.hasNextNotificationLog());        assertEquals(shouldBePrevious, log.hasPreviousNotificationLog());        assertTrue(log.isArchived());    }    @Test    public void testEncodedWithDecodedNavigationIds() throws Exception {        EventStore eventStore = this.eventStore();        NotificationLogFactory factory = new NotificationLogFactory(eventStore);        NotificationLog log = factory.createCurrentNotificationLog();        String currentId = log.notificationLogId();        NotificationLogId decodedCurrentLogId = log.decodedNotificationLogId();        assertEquals(log.decodedNotificationLogId(), new NotificationLogId(currentId));        String previousId = log.previousNotificationLogId();        NotificationLogId decodedPreviousLogId = log.decodedPreviousNotificationLogId();        assertEquals(decodedPreviousLogId, new NotificationLogId(previousId));        log = factory.createNotificationLog(log.decodedPreviousNotificationLogId());        String nextId = log.nextNotificationLogId();        NotificationLogId decodedNextLogId = log.decodedNextNotificationLogId();        assertEquals(decodedNextLogId, new NotificationLogId(nextId));        assertEquals(decodedCurrentLogId, decodedNextLogId);    }    @Before    public void setUp() {        System.out.println("In setp");        jpaEventStore.init();    }    private EventStore eventStore() {        return this.eventStore;    }}