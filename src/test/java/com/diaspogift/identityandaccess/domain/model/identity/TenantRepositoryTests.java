package com.diaspogift.identityandaccess.domain.model.identity;import com.diaspogift.identityandaccess.domain.model.DomainRegistry;import com.diaspogift.identityandaccess.domain.model.IdentityAndAccessTest;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.transaction.annotation.Transactional;import java.util.Collection;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTest@Transactionalpublic class TenantRepositoryTests extends IdentityAndAccessTest {    @Test    public void add() throws Exception {        Tenant tenant = this.actifTenantAggregate();        DomainRegistry.tenantRepository().add(tenant);        Tenant savedTenant =                DomainRegistry                        .tenantRepository()                        .tenantOfId(tenant.tenantId());        assertNotNull(savedTenant);        assertEquals(tenant, savedTenant);    }    //TO DO/*    @Test    public void tenantNamed() throws Exception {        Tenant tenant = this.actifTenantAggregate();        DomainRegistry.tenantRepository().add(tenant);        Tenant savedTenant =                DomainRegistry                        .tenantRepository()                        .tenantNamed(tenant.name());        assertNotNull(savedTenant);        assertEquals(tenant, savedTenant);    }*/    @Test    public void remove() throws Exception {        Tenant tenant = this.actifTenantAggregate();        DomainRegistry.tenantRepository().add(tenant);        Tenant savedTenant =                DomainRegistry                        .tenantRepository()                        .tenantOfId(tenant.tenantId());        assertNotNull(savedTenant);        DomainRegistry.tenantRepository().remove(tenant);        Tenant removedTenant = null;        boolean emptyResultDataAccessExceptionTrigger = false;        try {            removedTenant =                    DomainRegistry                            .tenantRepository()                            .tenantOfId(tenant.tenantId());            fail("Should not have got here.");        } catch (EmptyResultDataAccessException e) {            emptyResultDataAccessExceptionTrigger = true;        }        assertNull(removedTenant);        assertTrue(emptyResultDataAccessExceptionTrigger);    }    @Test    public void allSimilarlyNamedUsers() throws Exception {        User user = this.userAggregate();        DomainRegistry.userRepository().add(user);        User user2 = this.userAggregate2();        DomainRegistry.userRepository().add(user2);        FullName name = user.person().name();        Collection<User> users =                DomainRegistry                        .userRepository()                        .allSimilarlyNamedUsers(                                user.tenantId(),                                "",                                name.lastName().substring(0, 2));        assertEquals(users.size(), 2);    }}