package com.diaspogift.identityandaccess.domain.model.identity;import com.diaspogift.identityandaccess.domain.model.DomainRegistry;import com.diaspogift.identityandaccess.domain.model.IdentityAndAccessTest;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.transaction.annotation.Transactional;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;@RunWith(SpringRunner.class)@SpringBootTest@Transactionalpublic class PasswordServiceTests extends IdentityAndAccessTest {    public PasswordServiceTests() {        super();    }    @Test    public void generateStrongPassword() throws Exception {        String password =                DomainRegistry                        .passwordService()                        .generateStrongPassword();        assertTrue(DomainRegistry.passwordService().isStrong(password));        assertFalse(DomainRegistry.passwordService().isWeak(password));    }    @Test    public void isStrongPassword() throws Exception {        final String password = "Th1sShudBStrong.";        assertTrue(DomainRegistry.passwordService().isStrong(password));        assertFalse(DomainRegistry.passwordService().isVeryStrong(password));        assertFalse(DomainRegistry.passwordService().isWeak(password));    }    @Test    public void isVeryStrongPassword() throws Exception {        final String password = "Th1sSh0uldBV3ryStrong!";        assertTrue(DomainRegistry.passwordService().isVeryStrong(password));        assertTrue(DomainRegistry.passwordService().isStrong(password));        assertFalse(DomainRegistry.passwordService().isWeak(password));    }    @Test    public void isWeakPassword() throws Exception {        final String password = "Weakness";        assertFalse(DomainRegistry.passwordService().isVeryStrong(password));        assertFalse(DomainRegistry.passwordService().isStrong(password));        assertTrue(DomainRegistry.passwordService().isWeak(password));    }}