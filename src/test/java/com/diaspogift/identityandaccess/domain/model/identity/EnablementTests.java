package com.diaspogift.identityandaccess.domain.model.identity;import com.diaspogift.identityandaccess.domain.model.IdentityAndAccessTest;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;@RunWith(SpringRunner.class)@SpringBootTestpublic class EnablementTests extends IdentityAndAccessTest {    public EnablementTests() {        super();    }    @Test    public void enablementEnabled() throws Exception {        Enablement enablement = new Enablement(true, null, null);        assertTrue(enablement.isEnablementEnabled());    }    @Test    public void enablementDisabled() throws Exception {        Enablement enablement = new Enablement(false, null, null);        assertFalse(enablement.isEnablementEnabled());    }    @Test    public void enablementOutsideStartEndDates() throws Exception {        Enablement enablement =                new Enablement(                        true,                        this.dayBeforeYesterday(),                        this.yesterday());        assertFalse(enablement.isEnablementEnabled());    }    @Test    public void enablementUnsequencedDates() throws Exception {        boolean failure = false;        try {            new Enablement(                    true,                    this.tomorrow(),                    this.today());        } catch (Throwable t) {            failure = true;        }        assertTrue(failure);    }    @Test    public void enablementEndsTimeExpired() throws Exception {        Enablement enablement =                new Enablement(                        true,                        this.dayBeforeYesterday(),                        this.yesterday());        assertTrue(enablement.isTimeExpired());    }    @Test    public void enablementHasNotBegunTimeExpired() throws Exception {        Enablement enablement =                new Enablement(                        true,                        this.tomorrow(),                        this.dayAfterTomorrow());        assertTrue(enablement.isTimeExpired());    }}