package com.diaspogift.identityandaccess.application.access;import com.diaspogift.identityandaccess.application.ApplicationServiceTests;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.transaction.annotation.Transactional;@RunWith(SpringRunner.class)@SpringBootTest@Transactionalpublic class AccessApplicationServiceTests extends ApplicationServiceTests {    public AccessApplicationServiceTests() {        super();    }    /*@Test    public void assignUserToRole() throws Exception {        User user = this.userAggregate();        DomainRegistry.userRepository().add(user);        Role role = this.roleAggregate();        DomainRegistry.roleRepository().add(role);        assertFalse(role.isInRole(user, DomainRegistry.groupMemberService()));        ApplicationServiceRegistry                .accessApplicationService()                .assignUsersToRole(                        new AssignUsersToRoleCommand(                                user.userId().tenantId().id(),                                user.userId().username(),                                role.name()));        assertTrue(role.isInRole(user, DomainRegistry.groupMemberService()));    }*/    /*@Test    public void isUserInRole() throws Exception {        User user = this.userAggregate();        DomainRegistry.userRepository().add(user);        Role role = this.roleAggregate();        DomainRegistry.roleRepository().add(role);        assertFalse(                ApplicationServiceRegistry                        .accessApplicationService()                        .isUserInRole(                                user.userId().tenantId().id(),                                user.userId().username(),                                role.name()));        ApplicationServiceRegistry                .accessApplicationService()                .assignUsersToRole(                        new AssignUsersToRoleCommand(                                user.userId().tenantId().id(),                                user.userId().username(),                                role.name()));        assertTrue(                ApplicationServiceRegistry                        .accessApplicationService()                        .isUserInRole(                                user.userId().tenantId().id(),                                user.userId().username(),                                role.name()));    }*/  /*  @Test    public void userInRole() throws Exception {        User user = this.userAggregate();        DomainRegistry.userRepository().add(user);        Role role = this.roleAggregate();        DomainRegistry.roleRepository().add(role);        User userNotInRole =                ApplicationServiceRegistry                        .accessApplicationService()                        .userInRole(user.userId().tenantId().id(), user.userId().username(), role.name());        assertNull(userNotInRole);        ApplicationServiceRegistry                .accessApplicationService()                .assignUsersToRole(                        new AssignUsersToRoleCommand(                                user.userId().tenantId().id(),                                user.userId().username(),                                role.name()));        User userInRole =                ApplicationServiceRegistry                        .accessApplicationService()                        .userInRole(user.userId().tenantId().id(), user.userId().username(), role.name());        assertNotNull(userInRole);    }*/}